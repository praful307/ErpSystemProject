@model IEnumerable<ErpSystem_Models.TopicModelCheckbox>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/DeveloperLayout.cshtml";
}

<style>
    
</style>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">

<div class="container-fluid py-4" style="background-color:white;">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow-lg border-0 rounded-4">
                <div class="card-header text-center  bg-gradient text-white rounded-top-4" style="background-color:navy">
                    <h3 class="fw-semibold mb-0"><i class="bi bi-journal-text me-2"></i>Add Topic Wise Content</h3>
                </div>

                <div class="card-body px-5 py-4">
               
                    <div class="row g-4 align-items-start mb-4">
                        <div class="col-md-4">
                            <label class="form-label fw-bold text-primary mb-2">Course</label>
                            <select id="ddcourse" class="form-select shadow-sm text-center">
                                <option selected disabled>-- Select Course --</option>
                            </select>
                        </div>

                        <div class="col-md-8">
                            <label class="form-label fw-bold text-primary mb-2">Select Topics</label>
                            <div class="card border rounded-3 shadow-sm p-3" style="max-height:300px; overflow-y:auto;">
                                <div class="row row-cols-2 g-2">
                                    @for (int i = 0; i < Model.Count(); i++)
                                    {
                                        <div class="col">
                                            <div class="form-check">
                                                @Html.CheckBoxFor(e => Model.ToArray()[i].Iselected, new { @class = "form-check-input" })
                                                @Html.LabelFor(e => Model.ToArray()[i].Iselected, Model.ToArray()[i].TopicName, new { @class = "form-check-label text-primary" })
                                                @Html.HiddenFor(e => Model.ToArray()[i].TopicId)
                                                @Html.HiddenFor(e => Model.ToArray()[i].TopicName)
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Save Button -->
                    <div class="text-center mt-4">
                        <button type="button" class="btn btn-success px-5 py-2 rounded-pill shadow-sm fw-semibold" onclick="saveCourseTopics()">
                            <i class="bi bi-save me-2"></i>Save Topics
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Table Section -->
    <div class="row justify-content-center mt-5">
        <div class="col-md-12">
            <div class="card shadow-sm border-0 rounded-4">
                <div class="card-body p-0 scroll-table">
                    <table class="table table-bordered table-striped mb-0 text-center align-middle" style="min-width:800px;">
                        <thead class="table-primary">
                            <tr>
                                <th>Sr.No</th>
                                <th>Course</th>
                                <th>Topics</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="tbldata"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Scroll Table & Styling -->
<style>
    body {
        background-color: #eef3f9;
        font-family: 'Segoe UI', sans-serif;
    }

    .scroll-table {
        max-height: 400px;
        overflow-y: auto;
        overflow-x: auto;
        display: block;
    }

        .scroll-table table thead th {
            position: sticky;
            top: 0;
            z-index: 2;
            color: darkblue;
        }

    .btn:hover {
        transform: scale(1.03);
        transition: all 0.2s ease-in-out;
    }

    .form-check-label.text-primary {
        color: darkblue !important;
    }
</style>

<script>
     

   //==========================GetCourse==============================================



        const GetCourse=async()=>{
        const response = await fetch("/Developer/Course/GetCourses");
        const course= await response.json();
        console.log(course);
         var data="<option selected disabled>--Select Course</option>"
         course.forEach(function(d,k){
              data+="<option value="+d.courseId+">"+d.courseName+"</option>"
         })
          document.getElementById("ddcourse").innerHTML=data;
    }
    GetCourse();

    //=================================AddCoursewiseTopic=====================================
               const saveCourseTopics = async () => {
             debugger;
             var courseId = document.getElementById("ddcourse").value;
             if (!courseId) {
                 alert("Please select a course!");
                 return;
             }

             var topics = [];
             document.querySelectorAll("input[type='checkbox']").forEach(chk => {
                 if (chk.checked) {
                     // Find the hidden input inside the same form-check div
                     var topicId = chk.closest('.form-check')
                                      .querySelector("input[type='hidden'][name*='TopicId']")
                                      .value;
                     topics.push({ TopicId: parseInt(topicId) });
                 }
             });

             if (topics.length === 0) {
                 alert("Please select at least one topic!");
                 return;
             }

             const st = {
                 CourseId: parseInt(courseId),
                 Topics: topics
             };

             const response = await fetch("/Developer/CourseTopic/AddCourseWiseTopic", {
                 method: 'POST',
                 headers: {
                     "Content-Type": 'application/json'
                 },
                 body: JSON.stringify(st)
             });

             const data = await response.json();
          
             
                 alert("Something went wrong while saving topics.");
                  Displaydata();
                  window.location.reload();
             
         };
         //=========================Display Course And Topics=====================
        const Displaydata = async () => {
        const response = await fetch("/Developer/CourseTopic/GetCourseTopic");
        const co = await response.json();

        const result = {};

        co.forEach(d => {
           
            if (!result[d.courseId]) {
                result[d.courseId] = {
                    courseName: d.courseName,
                    topics: []
                };
            }
            result[d.courseId].topics.push(d.topicName);
        });

        var k = 1;
        var data = "";

        for (var courseId in result) {
            var course = result[courseId].courseName;
            var topics = result[courseId].topics;

            data += "<tr>" +
                        "<td>" + (k++) + "</td>" +
                        "<td>" + course + "</td>" +
                        "<td>" + topics.join(" , ") + "</td>" +
                        "<td>" +
                            "<input type='button' value='View' class='btn btn-info' onclick='EditData(" + courseId + ")'/>" +
                            " &nbsp; " +
                            "<input type='button' value='Delete' class='btn btn-danger' onclick='DeleteData(" + courseId + ")'/>" +
                        "</td>" +
                    "</tr>";
        }

        document.getElementById("tbldata").innerHTML = data;
    }




         Displaydata();
          //============================Edit Course And Topics========================= 
            // const EditData=async(courseTopicId)=>{
            //     debugger;
            //       const response= await fetch("/Developer/CourseTopic/GetCourseTopicById?courseTopic)Id="+courseTopicId);
            //          const data=  await response.json();
            //              console.log(data);
            //                 if(data){
            //                     document.getElementById("ddcourse").value=data.courseId;
            //                     // Uncheck all checkboxes first
            //                     document.querySelectorAll("input[type='checkbox']").forEach(chk => chk.checked = false);
                                
            //                     // Check the checkboxes that match the topics in the data
            //                     data.topics.forEach(topic => {
            //                         const chk = document.querySelector(`input[type='checkbox'][name*='TopicId'][value='${topic.topicId}']`);
            //                         if (chk) {
            //                             chk.checked = true;
            //                         }
            //                     });
            //                  }

            const EditData=async(id)=>{
                  const response= await fetch("/Developer/CourseTopic/GetCourseTopicById/"+id);
                  const data= await response.json();
                   console.log(data);
            }


</script>